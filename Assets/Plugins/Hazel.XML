<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hazel</name>
    </assembly>
    <members>
        <member name="T:Hazel.Connection">
            <summary>
                Base class for all connections.
            </summary>
            <remarks>
                <para>
                    Connection is the base class for all connections that Hazel can make. It provides common functionality and a 
                    standard interface to allow connections to be swapped easily.
                </para>
                <para>
                    Any class inheriting from Connection should provide the 3 standard guarantees that Hazel provides:
                    <list type="bullet">
                        <item>
                            <description>Thread Safe</description>
                        </item>
                        <item>
                            <description>Connection Orientated</description>
                        </item>
                        <item>
                            <description>Packet/Message Based</description>
                        </item>
                    </list>
                </para>
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="E:Hazel.Connection.DataReceived">
            <summary>
                Called when a message has been received.
            </summary>
            <remarks>
                <para>
                    DataReceived is invoked everytime a message is received from the end point of this connection, the message 
                    that was received can be found in the <see cref="T:Hazel.DataReceivedEventArgs" /> alongside other information from the 
                    event.
                </para>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Event_Thread_Safety_Warning']/*" />
            </remarks>
            <example>
                <code language="C#" source="DocInclude/TcpClientExample.cs" />
            </example>
        </member>
        <member name="E:Hazel.Connection.Disconnected">
            <summary>
                Called when the end point disconnects or an error occurs.
            </summary>
            <remarks>
                <para>
                    Disconnected is invoked when the connection is closed due to an exception occuring or because the remote 
                    end point disconnected. If it was invoked due to an exception occuring then the exception is available 
                    in the <see cref="T:Hazel.DisconnectedEventArgs" /> passed with the event.
                </para>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Event_Thread_Safety_Warning']/*" />
            </remarks>
            <example>
                <code language="C#" source="DocInclude/TcpClientExample.cs" />
            </example>
        </member>
        <member name="P:Hazel.Connection.EndPoint">
            <summary>
                The remote end point of this Connection.
            </summary>
            <remarks>
                This is the end point that this connection is connected to (i.e. the other device). This returns an abstract 
                <see cref="T:Hazel.ConnectionEndPoint"/> which can then be cast to an appropriate end point depending on the 
                connection type.
            </remarks>
        </member>
        <member name="P:Hazel.Connection.Statistics">
            <summary>
                The traffic statistics about this Connection.
            </summary>
            <remarks>
                Contains statistics about the number of messages and bytes sent and received by this connection.
            </remarks>
        </member>
        <member name="P:Hazel.Connection.State">
            <summary>
                The state of this connection.
            </summary>
            <remarks>
                <para>
                    Connections go round 4 states in their lifetime: they start as <see cref="F:Hazel.ConnectionState.NotConnected"/> to 
                    indicate they have no endpoint, calling <see cref="M:Hazel.Connection.Connect(System.Byte[],System.Int32)"/> takes them into 
                    <see cref="F:Hazel.ConnectionState.Connecting"/>, once they have received confirmation they are connected they enter
                    <see cref="F:Hazel.ConnectionState.Connected"/> and finally calling <see cref="M:Hazel.Connection.Close"/> sets them to 
                    <see cref="F:Hazel.ConnectionState.Disconnecting"/> and then the sequence repeats back to
                    <see cref="F:Hazel.ConnectionState.NotConnected"/> once disconnection is complete.
                </para>
                <para>
                    Data can only be sent while in <see cref="F:Hazel.ConnectionState.Connected"/> and all attempts to send data when
                    in any other state will throw an InvalidOperationException.
                </para>
                <para>
                    All implementers should be aware that when this is set to <see cref="F:Hazel.ConnectionState.Connected"/> it will
                    release all threads that are blocked on <see cref="M:Hazel.Connection.WaitOnConnect(System.Int32)"/>.
                </para>
            </remarks>
        </member>
        <member name="F:Hazel.Connection.connectWaitLock">
            <summary>
                Reset event that is triggered when the connection is marked Connected.
            </summary>
        </member>
        <member name="M:Hazel.Connection.#ctor">
            <summary>
                Constructor that initializes the ConnecitonStatistics object.
            </summary>
            <remarks>
                This constructor initialises <see cref="P:Hazel.Connection.Statistics"/> with empty statistics and sets <see cref="P:Hazel.Connection.State"/> to 
                <see cref="F:Hazel.ConnectionState.NotConnected"/>.
            </remarks>
        </member>
        <member name="M:Hazel.Connection.SendBytes(System.Byte[],Hazel.SendOption)">
            <summary>
                Sends a number of bytes to the end point of the connection using the specified <see cref="T:Hazel.SendOption" />.
            </summary>
            <param name="bytes">The bytes of the message to send.</param>
            <param name="sendOption">The option specifying how the message should be sent.</param>
            <remarks>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Connection_SendBytes_General']/*" />
                <para>
                    The sendOptions parameter is only a request to use those options and the actual method used to send the
                    data is up to the implementation. There are circumstances where this parameter may be ignored but in 
                    general any implementer should aim to always follow the user's request.
                </para>
            </remarks>
        </member>
        <member name="M:Hazel.Connection.Connect(System.Byte[],System.Int32)">
            <summary>
                Connects the connection to a server and begins listening.
            </summary>
            <param name="bytes">The bytes of data to send in the handshake.</param>
            <param name="timeout">The number of milliseconds to wait before giving up on the connect attempt.</param>
            <remarks>
                Calling Connect makes the connection attempt to connect to the end point that's specified in the 
                constructor. This method will block until the connection attempt completes and will throw a 
                <see cref="T:Hazel.HazelException"/> if there is a problem connecting.
            </remarks>
        </member>
        <member name="M:Hazel.Connection.InvokeDataReceived(System.Byte[],Hazel.SendOption)">
            <summary>
                Invokes the DataReceived event.
            </summary>
            <param name="bytes">The bytes received.</param>
            <param name="sendOption">The <see cref="T:Hazel.SendOption"/> the message was received with.</param>
            <remarks>
                Invokes the <see cref="E:Hazel.Connection.DataReceived"/> event on this connection to alert subscribers a new message has been
                received. The bytes and the send option that the message was sent with should be passed in to give to the
                subscribers.
            </remarks>
        </member>
        <member name="M:Hazel.Connection.InvokeDisconnected(System.Exception)">
            <summary>
                Invokes the Disconnected event.
            </summary>
            <param name="e">The exception, if any, that occured to cause this.</param>
            <remarks>
                Invokes the <see cref="E:Hazel.Connection.Disconnected"/> event to alert subscribres this connection has been disconnected either 
                by the end point or because an error occured. If an error occured the error should be passed in in order to 
                pass to the subscribers, otherwise null can be passed in.
            </remarks>
        </member>
        <member name="M:Hazel.Connection.WaitOnConnect(System.Int32)">
            <summary>
                Blocks until the Connection is connected.
            </summary>
            <param name="timeout">The number of milliseconds to wait before timing out.</param>
            <remarks>
                This is a helper method for waiting until the connection is connected. It will block until the 
                <see cref="P:Hazel.Connection.State"/> property is set to <see cref="F:Hazel.ConnectionState.Connected"/> allowing the main thread to 
                wait until specific data is received etc. before returning to the user's code.
            </remarks>
        </member>
        <member name="M:Hazel.Connection.Close">
            <summary>
                Closes this connection safely.
            </summary>
            <remarks>
                <para>
                    Informs the end point of the connection that we are disconnecting from them and disposes of this 
                    connection.
                </para>
                <para>
                    This calls <see cref="M:Hazel.Connection.Dispose"/> and therefore sets <see cref="P:Hazel.Connection.State"/> straight to 
                    <see cref="F:Hazel.ConnectionState.NotConnected"/>. Once you call Close you will not be able to send any more
                    data using this connection and no more data will be received.
                </para> 
            </remarks>
        </member>
        <member name="M:Hazel.Connection.Dispose">
            <summary>
                Disposes of this NetworkConnection.
            </summary>
        </member>
        <member name="M:Hazel.Connection.Dispose(System.Boolean)">
            <summary>
                Disposes of this NetworkConnection.
            </summary>
            <param name="disposing">Are we currently disposing?</param>
        </member>
        <member name="T:Hazel.ConnectionEndPoint">
            <summary>
                Base class for all end points of connections.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Hazel.ConnectionListener">
            <summary>
                Base class for all connection listeners.
            </summary>
            <remarks>
                <para>
                    ConnectionListeners are server side objects that listen for clients and create matching server side connections 
                    for each client in a similar way to TCP does. These connections should already have a 
                    <see cref="P:Hazel.Connection.State">State</see> of <see cref="F:Hazel.ConnectionState.Connected"/> and so should be ready for 
                    comunication immediately.
                </para>
                <para>
                    Each time a client connects the <see cref="E:Hazel.ConnectionListener.NewConnection"/> event will be invoked to alert all subscribers to
                    the new connection. A disconnected event is then present on the <see cref="T:Hazel.Connection"/> that is passed to the
                    subscribers.
                </para>
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="E:Hazel.ConnectionListener.NewConnection">
            <summary>
                Invoked when a new client connects.
            </summary>
            <remarks>
                <para>
                    NewConnection is invoked each time a client connects to the listener. The 
                    <see cref="T:Hazel.NewConnectionEventArgs" /> contains the new <see cref="T:Hazel.Connection" /> for communication with this
                    client.
                </para>
                <para>
                    Hazel doesn't store connections so it is your responsibility to keep track of the connections to your 
                    server. Note that as <see cref="T:Hazel.Connection" /> implements <see cref="T:System.IDisposable" /> if you are not storing
                    a connection then as a bare minimum you should call <see cref="M:Hazel.Connection.Dispose" /> here in order to 
                    release the connection correctly.
                </para>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Event_Thread_Safety_Warning']/*" />
            </remarks>
            <example>
                <code language="C#" source="DocInclude/TcpListenerExample.cs" />
            </example>
        </member>
        <member name="M:Hazel.ConnectionListener.Start">
            <summary>
                Makes this connection listener begin listening for connections.
            </summary>
            <remarks>
                <para>
                    This instructs the listener to begin listening for new clients connecting to the server. When a new client 
                    connects the <see cref="E:Hazel.ConnectionListener.NewConnection"/> event will be invoked containing the connection to the new client.
                </para>
                <para>
                    To stop listening you should call <see cref="M:Hazel.ConnectionListener.Dispose"/>.
                </para>
            </remarks>
            <example>
                <code language="C#" source="DocInclude/TcpListenerExample.cs"/>
            </example>
        </member>
        <member name="M:Hazel.ConnectionListener.InvokeNewConnection(System.Byte[],Hazel.Connection)">
            <summary>
                Invokes the NewConnection event with the supplied connection.
            </summary>
            <param name="bytes">The user sent bytes that were received as part of the handshake.</param>
            <param name="connection">The connection to pass in the arguments.</param>
            <remarks>
                Implementers should call this to invoke the <see cref="E:Hazel.ConnectionListener.NewConnection"/> event before data is received so that
                subscribers do not miss any data that may have been sent immediately after connecting.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionListener.Close">
            <summary>
                Closes the connection listener safely.
            </summary>
            <remarks>
                Internally this simply calls Dispose therefore trying to reuse the ConnectionListener after calling Close will
                cause ObjectDisposedExceptions.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionListener.Dispose">
            <summary>
                Call to dispose of the connection listener.
            </summary>
        </member>
        <member name="M:Hazel.ConnectionListener.Dispose(System.Boolean)">
            <summary>
                Called when the object is being disposed.
            </summary>
            <param name="disposing">Are we disposing?</param>
        </member>
        <member name="T:Hazel.ConnectionState">
            <summary>
                Represents the state a <see cref="T:Hazel.Connection"/> is currently in.
            </summary>
        </member>
        <member name="F:Hazel.ConnectionState.NotConnected">
            <summary>
                The Connection has either not been established yet or has been disconnected.
            </summary>
        </member>
        <member name="F:Hazel.ConnectionState.Connecting">
            <summary>
                The Connection is currently connecting to an endpoint.
            </summary>
        </member>
        <member name="F:Hazel.ConnectionState.Connected">
            <summary>
                The Connection is connected and data can be transfered.
            </summary>
        </member>
        <member name="F:Hazel.ConnectionState.Disconnecting">
            <summary>
                The Connection is currently disconnecting.
            </summary>
        </member>
        <member name="T:Hazel.DataReceivedEventArgs">
            <summary>
                Event arguments for the <see cref="E:Hazel.Connection.DataReceived" /> event.
            </summary>
            <remarks>
                <para>
                    This contains information about messages received by a connection and is passed to subscribers of the 
                    <see cref="E:Hazel.Connection.DataReceived">DataEvent</see>. 
                </para>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Recyclable']/*" />
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="F:Hazel.DataReceivedEventArgs.objectPool">
            <summary>
                Object pool for this event.
            </summary>
        </member>
        <member name="M:Hazel.DataReceivedEventArgs.GetObject">
            <summary>
                Returns an instance of this object from the pool.
            </summary>
            <returns>A new or recycled DataEventArgs object.</returns>
        </member>
        <member name="P:Hazel.DataReceivedEventArgs.Bytes">
            <summary>
                The bytes received from the client.
            </summary>
        </member>
        <member name="P:Hazel.DataReceivedEventArgs.SendOption">
            <summary>
                The <see cref="P:Hazel.DataReceivedEventArgs.SendOption"/> the data was sent with.
            </summary>
        </member>
        <member name="M:Hazel.DataReceivedEventArgs.#ctor">
            <summary>
                Private constructor for object pool.
            </summary>
        </member>
        <member name="M:Hazel.DataReceivedEventArgs.Set(System.Byte[],Hazel.SendOption)">
            <summary>
                Sets the members of the arguments.
            </summary>
            <param name="bytes">The bytes received.</param>
            <param name="sendOption">The send option used to send the data.</param>
        </member>
        <member name="M:Hazel.DataReceivedEventArgs.Recycle">
            <inheritdoc />
        </member>
        <member name="T:Hazel.DisconnectedEventArgs">
            <summary>
                Event arguments for the <see cref="E:Hazel.Connection.Disconnected" /> event.
            </summary>
            <remarks>
                <para>
                    This contains information about the cause of a disconnection and is passed to subscribers of the
                    <see cref="E:Hazel.Connection.Disconnected" /> event.
                </para>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Recyclable']/*" />
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="F:Hazel.DisconnectedEventArgs.objectPool">
            <summary>
                Object pool for this event.
            </summary>
        </member>
        <member name="M:Hazel.DisconnectedEventArgs.GetObject">
            <summary>
                Returns an instance of this object from the pool.
            </summary>
            <returns>A new or recycled DisconnectedEventArgs object.</returns>
        </member>
        <member name="P:Hazel.DisconnectedEventArgs.Exception">
            <summary>
                The exception, if any, that caused the disconnect.
            </summary>
            <remarks>
                If the disconnection was caused because of an exception occuring (for exemple a 
                <see cref="T:System.Net.Sockets.SocketException"/> on network based connections) this will contain the error 
                that caused it or a <see cref="T:Hazel.HazelException"/> with the details of the exception, if the disconnection 
                wasn't caused by an error then this will contain null.
            </remarks>
        </member>
        <member name="M:Hazel.DisconnectedEventArgs.#ctor">
            <summary>
                Private constructor for object pool.
            </summary>
        </member>
        <member name="M:Hazel.DisconnectedEventArgs.Set(System.Exception)">
            <summary>
                Sets the given exception for the arguments.
            </summary>
            <param name="e">The exception if the cause.</param>
        </member>
        <member name="M:Hazel.DisconnectedEventArgs.Recycle">
            <inheritdoc />
        </member>
        <member name="T:Hazel.HazelException">
            <summary>
                Wrapper for exceptions thrown from Hazel.
            </summary>
        </member>
        <member name="T:Hazel.IPMode">
            <summary>
                Represents the IP version that a connection or listener will use.
            </summary>
            <remarks>
                If you wand a client to connect or be able to connect using IPv6 then you should use <see cref="!:IPv4AndIPv6"/>, 
                this sets the underlying sockets to use IPv6 but still allow IPv4 sockets to connect for backwards compatability 
                and hence it is the default IPMode in most cases.
            </remarks>
        </member>
        <member name="F:Hazel.IPMode.IPv4">
            <summary>
                Instruction to use IPv4 only, IPv6 connections will not be able to connect.
            </summary>
        </member>
        <member name="F:Hazel.IPMode.IPv6">
            <summary>
                Instruction to use IPv6 only, IPv4 connections will not be able to connect. IPv4 addresses can be connected 
                by converting to IPv6 addresses.
            </summary>
        </member>
        <member name="T:Hazel.IRecyclable">
            <summary>
                Interface for all items that can be returned to an object pool.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Hazel.IRecyclable.Recycle">
            <summary>
                Returns this object back to the object pool.
            </summary>
            <remarks>
                <para>
                    Calling this when you are done with the object returns the object back to a pool in order to be reused.
                    This can reduce the amount of work the GC has to do dramatically but it is optional to call this.
                </para>
                <para>
                    Calling this indicates to Hazel that this can be reused and thus you should only call this when you are
                    completely finished with the object as the contents can be overwritten at any point after.
                </para>
            </remarks>
        </member>
        <member name="T:Hazel.NetworkConnection">
            <summary>
                Abstract base class for a <see cref="T:Hazel.Connection"/> to a remote end point via a network protocol like TCP or UDP.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Hazel.NetworkConnection.RemoteEndPoint">
            <summary>
                The remote end point of this connection.
            </summary>
            <remarks>
                This is the end point of the other device given as an <see cref="T:System.Net.EndPoint"/> rather than a generic
                <see cref="T:Hazel.ConnectionEndPoint"/> as the base <see cref="T:Hazel.Connection"/> does.
            </remarks>
        </member>
        <member name="P:Hazel.NetworkConnection.IPMode">
            <summary>
                The <see cref="P:Hazel.NetworkConnection.IPMode">IPMode</see> the client is connected using.
            </summary>
        </member>
        <member name="T:Hazel.NetworkConnectionListener">
            <summary>
                Abstract base class for a <see cref="T:Hazel.ConnectionListener"/> for network based connections.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Hazel.NetworkConnectionListener.EndPoint">
            <summary>
                The local end point the listener is listening for new clients on.
            </summary>
        </member>
        <member name="P:Hazel.NetworkConnectionListener.IPMode">
            <summary>
                The <see cref="P:Hazel.NetworkConnectionListener.IPMode">IPMode</see> the listener is listening for new clients on.
            </summary>
        </member>
        <member name="T:Hazel.NetworkEndPoint">
            <summary>
                Represents an endpoint to a remote resource on a network.
            </summary>
            <remarks>
                This wraps a <see cref="T:System.Net.EndPoint"/> for connecting across a network using protocols like TCP or UDP.
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Hazel.NetworkEndPoint.EndPoint">
            <summary>
                The <see cref="T:System.Net.EndPoint">EndPoint</see> this points to.
            </summary>
        </member>
        <member name="P:Hazel.NetworkEndPoint.IPMode">
            <summary>
                The <see cref="P:Hazel.NetworkEndPoint.IPMode"/> this will instruct connections to use.
            </summary>
        </member>
        <member name="M:Hazel.NetworkEndPoint.#ctor(System.Net.EndPoint,Hazel.IPMode)">
            <summary>
                Creates a NetworkEndPoint from a given <see cref="T:System.Net.EndPoint">EndPoint</see>.
            </summary>
            <param name="endPoint">The end point to wrap.</param>
            <param name="mode">The IP mode to use.</param>
        </member>
        <member name="M:Hazel.NetworkEndPoint.#ctor(System.Net.IPAddress,System.Int32,Hazel.IPMode)">
            <summary>
                Create a NetworkEndPoint to the specified <see cref="T:System.Net.IPAddress">IPAddress</see> and port.
            </summary>
            <param name="address">The IP address of the server.</param>
            <param name="port">The port the server is listening on.</param>
            <param name="mode">The IP mode to use.</param>
            <remarks>
                When using this constructor <see cref="P:Hazel.NetworkEndPoint.EndPoint"/> will contain an <see cref="T:System.Net.IPEndPoint"/>.
            </remarks>
        </member>
        <member name="M:Hazel.NetworkEndPoint.#ctor(System.String,System.Int32,Hazel.IPMode)">
            <summary>
                Creates a NetworkEndPoint to the specified IP address and port.
            </summary>
            <param name="IP">A valid IP address of the server.</param>
            <param name="port">The port the server is listening on.</param>
            <param name="mode">The IP mode to use.</param>
            <remarks>
                When using this constructor <see cref="P:Hazel.NetworkEndPoint.EndPoint"/> will contain an <see cref="T:System.Net.IPEndPoint"/>.
            </remarks>
        </member>
        <member name="M:Hazel.NetworkEndPoint.ToString">
            <inheritdoc />
        </member>
        <member name="T:Hazel.NewConnectionEventArgs">
            <summary>
                Event arguments for the <see cref="E:Hazel.ConnectionListener.NewConnection" /> event.
            </summary>
            <remarks>
                <para>
                    This contains the new connection for the client that connection and is passed to subscribers of the
                    <see cref="E:Hazel.ConnectionListener.NewConnection" /> event.
                </para>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Recyclable']/*" />
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="F:Hazel.NewConnectionEventArgs.objectPool">
            <summary>
                Object pool for this event.
            </summary>
        </member>
        <member name="M:Hazel.NewConnectionEventArgs.GetObject">
            <summary>
                Returns an instance of this object from the pool.
            </summary>
            <returns>A new or recycled NewConnectionEventArgs object.</returns>
        </member>
        <member name="P:Hazel.NewConnectionEventArgs.HandshakeData">
            <summary>
                The data received from the client in the handshake.
            </summary>
        </member>
        <member name="P:Hazel.NewConnectionEventArgs.Connection">
            <summary>
                The <see cref="P:Hazel.NewConnectionEventArgs.Connection"/> to the new client.
            </summary>
        </member>
        <member name="M:Hazel.NewConnectionEventArgs.#ctor">
            <summary>
                Private constructor for object pool.
            </summary>
        </member>
        <member name="M:Hazel.NewConnectionEventArgs.Set(System.Byte[],Hazel.Connection)">
            <summary>
                Sets the members of the arguments.
            </summary>
            <param name="bytes">The bytes that were received in the handshake.</param>
            <param name="connection">The new connection</param>
        </member>
        <member name="M:Hazel.NewConnectionEventArgs.Recycle">
            <inheritdoc />
        </member>
        <member name="T:Hazel.ObjectPool`1">
            <summary>
                A fairly simple object pool for items that will be created a lot.
            </summary>
            <typeparam name="T">The type that is pooled.</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Hazel.ObjectPool`1.pool">
            <summary>
                Our pool of objects
            </summary>
        </member>
        <member name="F:Hazel.ObjectPool`1.objectFactory">
            <summary>
                The generator for creating new objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hazel.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
                Internal constructor for our ObjectPool.
            </summary>
        </member>
        <member name="M:Hazel.ObjectPool`1.GetObject">
            <summary>
                Returns a pooled object of type T, if none are available another is created.
            </summary>
            <returns>An instance of T.</returns>
        </member>
        <member name="M:Hazel.ObjectPool`1.PutObject(`0)">
            <summary>
                Returns an object to the pool.
            </summary>
            <param name="item">The item to return.</param>
        </member>
        <member name="T:Hazel.SendOption">
            <summary>
                Specifies how a message should be sent between connections.
            </summary>
        </member>
        <member name="F:Hazel.SendOption.None">
            <summary>
                Requests unreliable delivery with no framentation.
            </summary>
            <remarks>
                Sending data using unreliable delivery means that data is not guaranteed to arrive at it's destination nor is 
                it guarenteed to arrive only once. However, unreliable delivery can be faster than other methods and it 
                typically requires a smaller number of protocol bytes than other methods. There is also typically less 
                processing involved and less memory needed as packets are not stored once sent.
            </remarks>
        </member>
        <member name="F:Hazel.SendOption.Reliable">
            <summary>
                Requests data be sent reliably but with no fragmentation.
            </summary>
            <remarks>
                Sending data reliably means that data is guarenteed to arrive and to arrive only once. Reliable delivery
                typically requires more processing, more memory (as packets need to be stored in case they need resending), 
                a larger number of protocol bytes and can be slower than unreliable delivery.
            </remarks>
        </member>
        <member name="F:Hazel.SendOption.FragmentedReliable">
            <summary>
                Requests data be sent so that large messages are fragmented into smaller chunks of
                data and reassembled when received.
            </summary>
            <remarks>
                Fragmented messages allow large amounts of data to be transmitted in smaller chunks when using connections 
                that do not support the transmission of large messages. By specifying reliable delivery messages are 
                guaranteed to arrive and to arrive only once but the sending process may require more memory, processing,
                a larger number protocol bytes and may be slower than sending unreliably.
            </remarks>
        </member>
        <member name="T:Hazel.Udp.UdpSendOption">
            <summary>
                Extra internal states for SendOption enumeration when using UDP.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpSendOption.Hello">
            <summary>
                Hello message for initiating communication.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpSendOption.Disconnect">
            <summary>
                Message for discontinuing communication.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpSendOption.Acknowledgement">
            <summary>
                Message acknowledging the receipt of a message.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpSendOption.Fragment">
            <summary>
                Message that is part of a larger, fragmented message.
            </summary>
        </member>
        <member name="T:Hazel.Udp.UdpClientConnection">
            <summary>
                Represents a client's connection to a server that uses the UDP protocol.
            </summary>
            <inheritdoc/>
        </member>
        <member name="F:Hazel.Udp.UdpClientConnection.socket">
            <summary>
                The socket we're connected via.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpClientConnection.stateLock">
            <summary>
                Object for locking the state.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpClientConnection.dataBuffer">
            <summary>
                The buffer to store incomming data in.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpClientConnection.#ctor(Hazel.NetworkEndPoint)">
            <summary>
                Creates a new UdpClientConnection.
            </summary>
            <param name="remoteEndPoint">A <see cref="T:Hazel.NetworkEndPoint"/> to connect to.</param>
        </member>
        <member name="M:Hazel.Udp.UdpClientConnection.WriteBytesToConnection(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Udp.UdpClientConnection.Connect(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Udp.UdpClientConnection.StartListeningForData">
            <summary>
                Instructs the listener to begin listening.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpClientConnection.ReadCallback(System.IAsyncResult)">
            <summary>
                Called when data has been received by the socket.
            </summary>
            <param name="result">The asyncronous operation's result.</param>
        </member>
        <member name="M:Hazel.Udp.UdpClientConnection.HandleDisconnect(Hazel.HazelException)">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Udp.UdpClientConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hazel.Udp.UdpConnection">
            <summary>
                Represents a connection that uses the UDP protocol.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Hazel.Udp.UdpConnection.#ctor">
            <summary>
                Creates a new UdpConnection and initializes the keep alive timer.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.WriteBytesToConnection(System.Byte[])">
            <summary>
                Writes the given bytes to the connection.
            </summary>
            <param name="bytes">The bytes to write.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.SendBytes(System.Byte[],Hazel.SendOption)">
            <inheritdoc />
            <remarks>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Connection_SendBytes_General']/*" />
                <para>
                    Udp connections can currently send messages using <see cref="F:Hazel.SendOption.None" /> and
                    <see cref="F:Hazel.SendOption.Reliable" />. Fragmented messages are not currently supported and will default to
                    <see cref="F:Hazel.SendOption.None" /> until implemented.
                </para>
            </remarks>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.HandleSend(System.Byte[],System.Byte,System.Action)">
            <summary>
                Handles the reliable/fragmented sending from this connection.
            </summary>
            <param name="data">The data being sent.</param>
            <param name="sendOption">The <see cref="T:Hazel.SendOption"/> specified as its byte value.</param>
            <param name="ackCallback">The callback to invoke when this packet is acknowledged.</param>
            <returns>The bytes that should actually be sent.</returns>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.HandleReceive(System.Byte[])">
            <summary>
                Handles the receiving of data.
            </summary>
            <param name="buffer">The buffer containing the bytes received.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.UnreliableSend(System.Byte[],System.Byte)">
            <summary>
                Sends bytes using the unreliable UDP protocol.
            </summary>
            <param name="data">The data.</param>
            <param name="sendOption">The SendOption to attach.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.InvokeDataReceived(Hazel.SendOption,System.Byte[],System.Int32)">
            <summary>
                Helper method to invoke the data received event.
            </summary>
            <param name="sendOption">The send option the message was received with.</param>
            <param name="buffer">The buffer received.</param>
            <param name="dataOffset">The offset of data in the buffer.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.SendHello(System.Byte[],System.Action)">
            <summary>
                Sends a hello packet to the remote endpoint.
            </summary>
            <param name="acknowledgeCallback">The callback to invoke when the hello packet is acknowledged.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.HandleDisconnect(Hazel.HazelException)">
            <summary>
                Called when the socket has been disconnected at the remote host.
            </summary>
            <param name="e">The exception if one was the cause.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.SendDisconnect">
            <summary>
                Sends a disconnect message to the end point.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Hazel.Udp.UdpConnection.FragmentSize">
            <summary>
                The amount of data that can be put into a fragment.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.lastFragmentIDAllocated">
            <summary>
                The last fragmented message ID that was written.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.FragmentedSend(System.Byte[])">
            <summary>
                Sends a message fragmenting it as needed to pass over the network.
            </summary>
            <param name="sendOption">The send option the message was sent with.</param>
            <param name="data">The data of the message to send.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.GetFragmentedMessage(System.UInt16)">
            <summary>
                Gets a message from those we've begun receiving or adds a new one.
            </summary>
            <param name="messageId">The Id of the message to find.</param>
            <returns></returns>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.FragmentedStartMessageReceive(System.Byte[])">
            <summary>
                Handles a the start message of a fragmented message.
            </summary>
            <param name="buffer">The buffer received.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.FragmentedMessageReceive(System.Byte[])">
            <summary>
                Handles a fragment message of a fragmented message.
            </summary>
            <param name="buffer">The buffer received.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.FinalizeFragmentedMessage(Hazel.Udp.UdpConnection.FragmentedMessage)">
            <summary>
                Finalizes a completed fragmented message and invokes message received events.
            </summary>
            <param name="message">The message received.</param>
        </member>
        <member name="T:Hazel.Udp.UdpConnection.FragmentedMessage">
            <summary>
                Holding class for the parts of a fragmented message so far received.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.FragmentedMessage.noFragments">
            <summary>
                The total number of fragments expected.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.FragmentedMessage.received">
            <summary>
                The fragments received so far.
            </summary>
        </member>
        <member name="P:Hazel.Udp.UdpConnection.KeepAliveInterval">
            <summary>
                The interval from data being received or transmitted to a keepalive packet being sent in milliseconds.
            </summary>
            <remarks>
                <para>
                    Keepalive packets serve to close connections when an endpoint abruptly disconnects and to ensure than any
                    NAT devices do not close their translation for our argument. By ensuring there is regular contact the
                    connection can detect and prevent these issues.
                </para>
                <para>
                    The default value is 10 seconds, set to System.Threading.Timeout.Infinite to disable keepalive packets.
                </para>
            </remarks>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.keepAliveTimer">
            <summary>
                The timer creating keepalive pulses.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.keepAliveTimerLock">
            <summary>
                Lock for keep alive timer.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.keepAliveTimerDisposed">
            <summary>
                Has the keep alive timer been disposed already?
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.InitializeKeepAliveTimer">
            <summary>
                Starts the keepalive timer.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.ResetKeepAliveTimer">
            <summary>
                Resets the keepalive timer to zero.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.DisposeKeepAliveTimer">
            <summary>
                Disposes of the keep alive timer.
            </summary>
        </member>
        <member name="P:Hazel.Udp.UdpConnection.ResendTimeout">
            <summary>
                The starting timeout, in miliseconds, at which data will be resent.
            </summary>
            <remarks>
                <para>
                    For reliable delivery data is resent at specified intervals unless an acknowledgement is received from the 
                    receiving device. The ResendTimeout specifies the interval between the packets being resent, each time a packet
                    is resent the interval is doubled for that packet until the number of resends exceeds the 
                    <see cref="P:Hazel.Udp.UdpConnection.ResendsBeforeDisconnect"/> value.
                </para>
                <para>
                    Setting this to its default of 0 will mean the timout is 4 times the value of the average ping, usually 
                    resulting in a more dynamic resend that responds to endpoints on slower or faster connections.
                </para>
            </remarks>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.lastIDAllocated">
            <summary>
                Holds the last ID allocated.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.reliableDataPacketsSent">
            <summary>
                The packets of data that have been transmitted reliably and not acknowledged.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.reliableDataPacketsMissing">
            <summary>
                The last packets that were received.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.reliableReceiveLast">
            <summary>
                The packet id that was received last.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.hasReceivedSomething">
            <summary>
                Has the connection received anything yet
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.totalRoundTime">
            <summary>
                The total time it has taken reliable packets to make a round trip.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.totalReliableMessages">
            <summary>
                The number of reliable messages that have been sent.
            </summary>
        </member>
        <member name="P:Hazel.Udp.UdpConnection.AveragePing">
            <summary>
                Returns the average ping to this endpoint.
            </summary>
            <remarks>
                This returns the average ping for a one-way trip as calculated from the reliable packets that have been sent 
                and acknowledged by the endpoint.
            </remarks>
        </member>
        <member name="P:Hazel.Udp.UdpConnection.ResendsBeforeDisconnect">
            <summary>
                The maximum times a message should be resent before marking the endpoint as disconnected.
            </summary>
            <remarks>
                Reliable packets will be resent at an interval defined in <see cref="P:Hazel.Udp.UdpConnection.ResendTimeout"/> for the number of times
                specified here. Once a packet has been retransmitted this number of times and has not been acknowledged the
                connection will be marked as disconnected and the <see cref="E:Hazel.Connection.Disconnected">Disconnected</see> event
                will be invoked.
            </remarks>
        </member>
        <member name="T:Hazel.Udp.UdpConnection.Packet">
            <summary>
                Class to hold packet data
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnection.Packet.objectPool">
            <summary>
                Object pool for this event.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.Packet.GetObject">
            <summary>
                Returns an instance of this object from the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.Packet.Recycle">
            <summary>
                Returns this object back to the object pool from whence it came.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.Packet.Dispose">
            <summary>
                Disposes of this object.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.AttachReliableID(System.Byte[],System.Int32,System.Action)">
            <summary>
                Adds a 2 byte ID to the packet at offset and stores the packet reference for retransmission.
            </summary>
            <param name="buffer">The buffer to attach to.</param>
            <param name="offset">The offset to attach at.</param>
            <param name="ackCallback">The callback to make once the packet has been acknowledged.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.ReliableSend(System.Byte,System.Byte[],System.Action)">
            <summary>
                Sends the bytes reliably and stores the send.
            </summary>
            <param name="bytes">The byte array to write to.</param>
            <param name="ackCallback">The callback to make once the packet has been acknowledged.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.ReliableMessageReceive(System.Byte[])">
            <summary>
                Handles a reliable message being received and invokes the data event.
            </summary>
            <param name="buffer">The buffer received.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.ProcessReliableReceive(System.Byte[],System.Int32)">
            <summary>
                Handles receives from reliable packets.
            </summary>
            <param name="bytes">The buffer containing the data.</param>
            <param name="offset">The offset of the reliable header.</param>
            <returns>Whether the packet was a new packet or not.</returns>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.AcknowledgementMessageReceive(System.Byte[])">
            <summary>
                Handles acknowledgement packets to us.
            </summary>
            <param name="bytes">The buffer containing the data.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnection.SendAck(System.Byte,System.Byte)">
            <summary>
                Sends an acknowledgement for a packet given its identification bytes.
            </summary>
            <param name="byte1">The first identification byte.</param>
            <param name="byte2">The second identification byte.</param>
        </member>
        <member name="T:Hazel.Udp.UdpConnectionListener">
            <summary>
                Listens for new UDP connections and creates UdpConnections for them.
            </summary>
            <inheritdoc />
        </member>
        <member name="F:Hazel.Udp.UdpConnectionListener.listener">
            <summary>
                The socket listening for connections.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnectionListener.dataBuffer">
            <summary>
                Buffer to store incoming data in.
            </summary>
        </member>
        <member name="F:Hazel.Udp.UdpConnectionListener.connections">
            <summary>
                The connections we currently hold
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.#ctor(System.Net.IPAddress,System.Int32,Hazel.IPMode)">
            <summary>
                Creates a new UdpConnectionListener for the given <see cref="T:System.Net.IPAddress"/>, port and <see cref="T:Hazel.IPMode"/>.
            </summary>
            <param name="IPAddress">The IPAddress to listen on.</param>
            <param name="port">The port to listen on.</param>
            <param name="mode">The <see cref="T:Hazel.IPMode"/> to listen with.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.#ctor(Hazel.NetworkEndPoint)">
            <summary>
                Creates a new UdpConnectionListener for the given <see cref="T:System.Net.IPAddress"/>, port and <see cref="T:Hazel.IPMode"/>.
            </summary>
            <param name="endPoint">The endpoint to listen on.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.Start">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.StartListeningForData">
            <summary>
                Instructs the listener to begin listening.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.ReadCallback(System.IAsyncResult)">
            <summary>
                Called when data has been received by the listener.
            </summary>
            <param name="result">The asyncronous operation's result.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.SendData(System.Byte[],System.Net.EndPoint)">
            <summary>
                Sends data from the listener socket.
            </summary>
            <param name="bytes">The bytes to send.</param>
            <param name="endPoint">The endpoint to send to.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.RemoveConnectionTo(System.Net.EndPoint)">
            <summary>
                Removes a virtual connection from the list.
            </summary>
            <param name="endPoint">The endpoint of the virtual connection.</param>
        </member>
        <member name="M:Hazel.Udp.UdpConnectionListener.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hazel.Udp.UdpServerConnection">
            <summary>
                Represents a servers's connection to a client that uses the UDP protocol.
            </summary>
            <inheritdoc/>
        </member>
        <member name="P:Hazel.Udp.UdpServerConnection.Listener">
            <summary>
                The connection listener that we use the socket of.
            </summary>
            <remarks>
                Udp server connections utilize the same socket in the listener for sends/receives, this is the listener that 
                created this connection and is hence the listener this conenction sends and receives via.
            </remarks>
        </member>
        <member name="F:Hazel.Udp.UdpServerConnection.stateLock">
            <summary>
                Lock object for the writing to the state of the connection.
            </summary>
        </member>
        <member name="M:Hazel.Udp.UdpServerConnection.#ctor(Hazel.Udp.UdpConnectionListener,System.Net.EndPoint,Hazel.IPMode)">
            <summary>
                Creates a UdpConnection for the virtual connection to the endpoint.
            </summary>
            <param name="listener">The listener that created this connection.</param>
            <param name="endPoint">The endpoint that we are connected to.</param>
            <param name="IPMode">The IPMode we are connected using.</param>
        </member>
        <member name="M:Hazel.Udp.UdpServerConnection.WriteBytesToConnection(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Udp.UdpServerConnection.Connect(System.Byte[],System.Int32)">
            <inheritdoc />
            <remarks>
                This will always throw a HazelException.
            </remarks>
        </member>
        <member name="M:Hazel.Udp.UdpServerConnection.HandleDisconnect(Hazel.HazelException)">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Udp.UdpServerConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hazel.Tcp.StateObject">
            <summary>
                Represents the state of the current receive operation for TCP connections.
            </summary>
        </member>
        <member name="F:Hazel.Tcp.StateObject.buffer">
            <summary>
                The buffer we're receiving.
            </summary>
        </member>
        <member name="F:Hazel.Tcp.StateObject.totalBytesReceived">
            <summary>
                The total number of bytes received so far.
            </summary>
        </member>
        <member name="F:Hazel.Tcp.StateObject.callback">
            <summary>
                The callback to invoke once the buffer has been filled.
            </summary>
        </member>
        <member name="M:Hazel.Tcp.StateObject.#ctor(System.Int32,System.Action{System.Byte[]})">
            <summary>
                Creates a StateObject with the specified length.
            </summary>
            <param name="length">The number of bytes expected to be received.</param>
            <param name="callback">The callback to invoke once data has been received.</param>
        </member>
        <member name="T:Hazel.Tcp.TcpConnection">
            <summary>
                Represents a connection that uses the TCP protocol.
            </summary>
            <inheritdoc />
        </member>
        <member name="F:Hazel.Tcp.TcpConnection.socket">
            <summary>
                The socket we're managing.
            </summary>
        </member>
        <member name="F:Hazel.Tcp.TcpConnection.socketLock">
            <summary>
                Lock for the socket.
            </summary>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.#ctor(System.Net.Sockets.Socket)">
            <summary>
                Creates a TcpConnection from a given TCP Socket.
            </summary>
            <param name="socket">The TCP socket to wrap.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.#ctor(Hazel.NetworkEndPoint)">
            <summary>
                Creates a new TCP connection.
            </summary>
            <param name="remoteEndPoint">A <see cref="T:Hazel.NetworkEndPoint"/> to connect to.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.Connect(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.SendBytes(System.Byte[],Hazel.SendOption)">
            <inheritdoc />
            <remarks>
                <!-- Failed to insert some or all of included XML --><include file="DocInclude/common.xml" path="docs/item[@name='Connection_SendBytes_General']/*" />
                <para>
                    The sendOption parameter is ignored by the TcpConnection as TCP only supports FragmentedReliable 
                    communication, specifying anything else will have no effect.
                </para>
            </remarks>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.HeaderReadCallback(System.Byte[],System.Action{System.Byte[]})">
            <summary>
                Called when a 4 byte header has been received.
            </summary>
            <param name="bytes">The 4 header bytes read.</param>
            <param name="callback">The callback to invoke when the body has been received.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.BodyReadCallback(System.Byte[])">
            <summary>
                Callback for when a body has been read.
            </summary>
            <param name="bytes">The data bytes received by the connection.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.StartReceiving">
            <summary>
                Starts this connection receiving data.
            </summary>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.StartWaitingForHandshake(System.Action{System.Byte[]})">
            <summary>
                Starts waiting for a first handshake packet to be received.
            </summary>
            <param name="callback">The callback to invoke when the handshake has been received.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.StartWaitingForHeader(System.Action{System.Byte[]})">
            <summary>
                Starts this connections waiting for the header.
            </summary>
            <param name="callback">The callback to invoke when the body has been read.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.StartWaitingForBytes(System.Int32,System.Action{System.Byte[]})">
            <summary>
                Waits for the specified amount of bytes to be received.
            </summary>
            <param name="length">The number of bytes to receive.</param>
            <param name="callback">The callback </param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.StartWaitingForChunk(Hazel.Tcp.StateObject)">
            <summary>
                Waits for the next chunk of data from this socket.
            </summary>
            <param name="state">The StateObject for the receive operation.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.ChunkReadCallback(System.IAsyncResult)">
            <summary>
                Called when a chunk has been read.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.HandleDisconnect(Hazel.HazelException)">
            <summary>
                Called when the socket has been disconnected at the remote host.
            </summary>
            <param name="e">The exception if one was the cause.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.AppendLengthHeader(System.Byte[])">
            <summary>
                Appends the length header to the bytes.
            </summary>
            <param name="bytes">The source bytes.</param>
            <returns>The new bytes.</returns>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.GetLengthFromBytes(System.Byte[])">
            <summary>
                Returns the length from a length header.
            </summary>
            <param name="bytes">The bytes received.</param>
            <returns>The number of bytes.</returns>
        </member>
        <member name="M:Hazel.Tcp.TcpConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Hazel.Tcp.TcpConnectionListener">
            <summary>
                Listens for new TCP connections and creates TCPConnections for them.
            </summary>
            <inheritdoc />
        </member>
        <member name="F:Hazel.Tcp.TcpConnectionListener.listener">
            <summary>
                The socket listening for connections.
            </summary>
        </member>
        <member name="M:Hazel.Tcp.TcpConnectionListener.#ctor(System.Net.IPAddress,System.Int32,Hazel.IPMode)">
            <summary>
                Creates a new TcpConnectionListener for the given <see cref="T:System.Net.IPAddress"/>, port and <see cref="T:Hazel.IPMode"/>.
            </summary>
            <param name="IPAddress">The IPAddress to listen on.</param>
            <param name="port">The port to listen on.</param>
            <param name="mode">The <see cref="T:Hazel.IPMode"/> to listen with.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnectionListener.#ctor(Hazel.NetworkEndPoint)">
            <summary>
                Creates a new TcpConnectionListener for the given <see cref="T:System.Net.IPAddress"/>, port and <see cref="T:Hazel.IPMode"/>.
            </summary>
            <param name="endPoint">The end point to listen on.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnectionListener.Start">
            <inheritdoc />
        </member>
        <member name="M:Hazel.Tcp.TcpConnectionListener.AcceptConnection(System.IAsyncResult)">
            <summary>
                Called when a new connection has been accepted by the listener.
            </summary>
            <param name="result">The asyncronous operation's result.</param>
        </member>
        <member name="M:Hazel.Tcp.TcpConnectionListener.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Hazel.ConnectionStatistics">
            <summary>
                Holds statistics about the traffic through a <see cref="T:Hazel.Connection"/>.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Hazel.ConnectionStatistics.MessagesSent">
            <summary>
                The total number of messages sent.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.UnreliableMessagesSent">
            <summary>
                The number of unreliable messages sent.
            </summary>
            <remarks>
                This is the number of unreliable messages that were sent from the <see cref="T:Hazel.Connection"/>, incremented 
                each time that LogUnreliableSend is called by the Connection. Messages that caused an error are not 
                counted and messages are only counted once all other operations in the send are complete.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.unreliableMessagesSent">
            <summary>
                The number of unreliable messages sent.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.ReliableMessagesSent">
            <summary>
                The number of reliable messages sent.
            </summary>
            <remarks>
                This is the number of reliable messages that were sent from the <see cref="T:Hazel.Connection"/>, incremented 
                each time that LogReliableSend is called by the Connection. Messages that caused an error are not 
                counted and messages are only counted once all other operations in the send are complete.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.reliableMessagesSent">
            <summary>
                The number of unreliable messages sent.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.FragmentedMessagesSent">
            <summary>
                The number of fragmented messages sent.
            </summary>
            <remarks>
                This is the number of fragmented messages that were sent from the <see cref="T:Hazel.Connection"/>, incremented 
                each time that LogFragmentedSend is called by the Connection. Messages that caused an error are not 
                counted and messages are only counted once all other operations in the send are complete.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.fragmentedMessagesSent">
            <summary>
                The number of fragmented messages sent.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.AcknowledgementMessagesSent">
            <summary>
                The number of acknowledgement messages sent.
            </summary>
            <remarks>
                This is the number of acknowledgements that were sent from the <see cref="T:Hazel.Connection"/>, incremented 
                each time that LogAcknowledgementSend is called by the Connection. Messages that caused an error are not 
                counted and messages are only counted once all other operations in the send are complete.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.acknowledgementMessagesSent">
            <summary>
                The number of acknowledgement messages sent.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.HelloMessagesSent">
            <summary>
                The number of hello messages sent.
            </summary>
            <remarks>
                This is the number of hello messages that were sent from the <see cref="T:Hazel.Connection"/>, incremented 
                each time that LogHelloSend is called by the Connection. Messages that caused an error are not 
                counted and messages are only counted once all other operations in the send are complete.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.helloMessagesSent">
            <summary>
                The number of hello messages sent.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.DataBytesSent">
            <summary>
                The number of bytes of data sent.
            </summary>
            <remarks>
                <para>
                    This is the number of bytes of data (i.e. user bytes) that were sent from the <see cref="T:Hazel.Connection"/>, 
                    accumulated each time that LogSend is called by the Connection. Messages that caused an error are not 
                    counted and messages are only counted once all other operations in the send are complete.
                </para>
                <para>
                    For the number of bytes including protocol bytes see <see cref="P:Hazel.ConnectionStatistics.TotalBytesSent"/>.
                </para>
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.dataBytesSent">
            <summary>
                The number of bytes of data sent.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.TotalBytesSent">
            <summary>
                The number of bytes sent in total.
            </summary>
            <remarks>
                <para>
                    This is the total number of bytes (the data bytes plus protocol bytes) that were sent from the 
                    <see cref="T:Hazel.Connection"/>, accumulated each time that LogSend is called by the Connection. Messages that 
                    caused an error are not counted and messages are only counted once all other operations in the send are 
                    complete.
                </para>
                <para>
                    For the number of data bytes excluding protocol bytes see <see cref="P:Hazel.ConnectionStatistics.DataBytesSent"/>.
                </para>
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.totalBytesSent">
            <summary>
                The number of bytes sent in total.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.MessagesReceived">
            <summary>
                The total number of messages received.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.UnreliableMessagesReceived">
            <summary>
                The number of unreliable messages received.
            </summary>
            <remarks>
                This is the number of unreliable messages that were received by the <see cref="T:Hazel.Connection"/>, incremented
                each time that LogUnreliableReceive is called by the Connection. Messages are counted before the receive event is invoked.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.unreliableMessagesReceived">
            <summary>
                The number of unreliable messages received.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.ReliableMessagesReceived">
            <summary>
                The number of reliable messages received.
            </summary>
            <remarks>
                This is the number of reliable messages that were received by the <see cref="T:Hazel.Connection"/>, incremented
                each time that LogReliableReceive is called by the Connection. Messages are counted before the receive event is invoked.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.reliableMessagesReceived">
            <summary>
                The number of reliable messages received.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.FragmentedMessagesReceived">
            <summary>
                The number of fragmented messages received.
            </summary>
            <remarks>
                This is the number of fragmented messages that were received by the <see cref="T:Hazel.Connection"/>, incremented
                each time that LogFragmentedReceive is called by the Connection. Messages are counted before the receive event is invoked.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.fragmentedMessagesReceived">
            <summary>
                The number of fragmented messages received.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.AcknowledgementMessagesReceived">
            <summary>
                The number of acknowledgement messages received.
            </summary>
            <remarks>
                This is the number of acknowledgement messages that were received by the <see cref="T:Hazel.Connection"/>, incremented
                each time that LogAcknowledgemntReceive is called by the Connection. Messages are counted before the receive event is invoked.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.acknowledgementMessagesReceived">
            <summary>
                The number of acknowledgement messages received.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.HelloMessagesReceived">
            <summary>
                The number of hello messages received.
            </summary>
            <remarks>
                This is the number of hello messages that were received by the <see cref="T:Hazel.Connection"/>, incremented
                each time that LogHelloReceive is called by the Connection. Messages are counted before the receive event is invoked.
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.helloMessagesReceived">
            <summary>
                The number of hello messages received.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.DataBytesReceived">
            <summary>
                The number of bytes of data received.
            </summary>
            <remarks>
                <para>
                    This is the number of bytes of data (i.e. user bytes) that were received by the <see cref="T:Hazel.Connection"/>, 
                    accumulated each time that LogReceive is called by the Connection. Messages are counted before the receive
                    event is invoked.
                </para>
                <para>
                    For the number of bytes including protocol bytes see <see cref="P:Hazel.ConnectionStatistics.TotalBytesReceived"/>.
                </para>
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.dataBytesReceived">
            <summary>
                The number of bytes of data received.
            </summary>
        </member>
        <member name="P:Hazel.ConnectionStatistics.TotalBytesReceived">
            <summary>
                The number of bytes received in total.
            </summary>
            <remarks>
                <para>
                    This is the total number of bytes (the data bytes plus protocol bytes) that were received by the 
                    <see cref="T:Hazel.Connection"/>, accumulated each time that LogReceive is called by the Connection. Messages are 
                    counted before the receive event is invoked.
                </para>
                <para>
                    For the number of data bytes excluding protocol bytes see <see cref="P:Hazel.ConnectionStatistics.DataBytesReceived"/>.
                </para>
            </remarks>
        </member>
        <member name="F:Hazel.ConnectionStatistics.totalBytesReceived">
            <summary>
                The number of bytes received in total.
            </summary>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogUnreliableSend(System.Int32,System.Int32)">
            <summary>
                Logs the sending of an unreliable data packet in the statistics.
            </summary>
            <param name="dataLength">The number of bytes of data sent.</param>
            <param name="totalLength">The total number of bytes sent.</param>
            <remarks>
                This should be called after the data has been sent and should only be called for data that is sent sucessfully.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogReliableSend(System.Int32,System.Int32)">
            <summary>
                Logs the sending of a reliable data packet in the statistics.
            </summary>
            <param name="dataLength">The number of bytes of data sent.</param>
            <param name="totalLength">The total number of bytes sent.</param>
            <remarks>
                This should be called after the data has been sent and should only be called for data that is sent sucessfully.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogFragmentedSend(System.Int32,System.Int32)">
            <summary>
                Logs the sending of a fragmented data packet in the statistics.
            </summary>
            <param name="dataLength">The number of bytes of data sent.</param>
            <param name="totalLength">The total number of bytes sent.</param>
            <remarks>
                This should be called after the data has been sent and should only be called for data that is sent sucessfully.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogAcknowledgementSend(System.Int32)">
            <summary>
                Logs the sending of a acknowledgement data packet in the statistics.
            </summary>
            <param name="totalLength">The total number of bytes sent.</param>
            <remarks>
                This should be called after the data has been sent and should only be called for data that is sent sucessfully.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogHelloSend(System.Int32)">
            <summary>
                Logs the sending of a hellp data packet in the statistics.
            </summary>
            <param name="totalLength">The total number of bytes sent.</param>
            <remarks>
                This should be called after the data has been sent and should only be called for data that is sent sucessfully.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogUnreliableReceive(System.Int32,System.Int32)">
            <summary>
                Logs the receiving of an unreliable data packet in the statistics.
            </summary>
            <param name="dataLength">The number of bytes of data received.</param>
            <param name="totalLength">The total number of bytes received.</param>
            <remarks>
                This should be called before the received event is invoked so it is up to date for subscribers to that event.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogReliableReceive(System.Int32,System.Int32)">
            <summary>
                Logs the receiving of a reliable data packet in the statistics.
            </summary>
            <param name="dataLength">The number of bytes of data received.</param>
            <param name="totalLength">The total number of bytes received.</param>
            <remarks>
                This should be called before the received event is invoked so it is up to date for subscribers to that event.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogFragmentedReceive(System.Int32,System.Int32)">
            <summary>
                Logs the receiving of a fragmented data packet in the statistics.
            </summary>
            <param name="dataLength">The number of bytes of data received.</param>
            <param name="totalLength">The total number of bytes received.</param>
            <remarks>
                This should be called before the received event is invoked so it is up to date for subscribers to that event.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogAcknowledgementReceive(System.Int32)">
            <summary>
                Logs the receiving of an acknowledgement data packet in the statistics.
            </summary>
            <param name="totalLength">The total number of bytes received.</param>
            <remarks>
                This should be called before the received event is invoked so it is up to date for subscribers to that event.
            </remarks>
        </member>
        <member name="M:Hazel.ConnectionStatistics.LogHelloReceive(System.Int32)">
            <summary>
                Logs the receiving of a hello data packet in the statistics.
            </summary>
            <param name="totalLength">The total number of bytes received.</param>
            <remarks>
                This should be called before the received event is invoked so it is up to date for subscribers to that event.
            </remarks>
        </member>
    </members>
</doc>
